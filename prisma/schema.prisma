generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------
// User Model
// ----------
model User {
  id        String   @id @default(uuid())
  name      String
  username  String   @unique
  email     String   @unique
  birthdate DateTime
  role      UserRole
  createdAt DateTime @default(now())

  // store relations
  cart     ShoppingCart? @relation("ShoppingCartToUser")
  orders   Order[]
  Wishlist Wishlist?
  Address  Address[]

  articles     Article[]
  articleViews ArticleView[]
}

// -------------------------------------
// Archetype, Module and Activity Models
// -------------------------------------
model Archetype {
  id          String   @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  modules     Module[]
}

model Module {
  id          String     @id @default(uuid())
  title       String
  description String
  order       Int
  archetypeId String?
  ageGroup    AgeGroup
  archetype   Archetype? @relation(fields: [archetypeId], references: [id])
  activities  Activity[]
}

model Activity {
  id       String       @id @default(uuid())
  moduleId String
  type     ActivityType
  title    String
  order    Int
  content  Json // structure varies per activity type
  module   Module       @relation(fields: [moduleId], references: [id])
}

// -------
// Article
// -------
model Article {
  id          String   @id @default(uuid())
  title       String
  content     String
  imageUrl    String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)

  author User?         @relation(fields: [authorId], references: [id])
  views  ArticleView[]
}

model ArticleView {
  id        String   @id @default(uuid())
  articleId String
  userId    String
  viewedAt  DateTime @default(now())

  article Article @relation(fields: [articleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([articleId, userId])
}

// ------------
// Store Models
// ------------
model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  imageUrl    String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
}

model ShoppingCart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(name: "ShoppingCartToUser", fields: [userId], references: [id])

  items CartItem[]

  @@unique([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  cart    ShoppingCart @relation(fields: [cartId], references: [id])
  product Product      @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  items WishlistItem[]

  @@unique([userId])
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  note       String?
  addedAt    DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  addressId String?
  status    OrderStatus @default(PENDING)
  total     Decimal     @default(0)
  createdAt DateTime    @default(now())

  user    User     @relation(fields: [userId], references: [id])
  address Address? @relation(fields: [addressId], references: [id])

  items OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  productName String
  unitPrice   Decimal
  quantity    Int      @default(1)
  subtotal    Decimal
  createdAt   DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// -------
// Address
// -------
model Address {
  id         String  @id @default(uuid())
  userId     String
  street     String
  number     String?
  complement String?
  city       String
  state      String
  zipCode    String

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

// -----
// Enums
// -----
enum UserRole {
  ADMIN
  RESPONSIBLE
  LEARNER
}

enum AgeGroup {
  CHILD // <= 11 years old
  TEEN // >= 17 years old
}

enum ActivityType {
  FAKE_NEWS
  POST_OR_NOT
  QUIZ
  THEMED_PASSWORD
  FAKE_CHAT
  MATCH_PAIRS
  INFORMATIVE_TEXT
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
