generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String             @id @default(uuid())
  name               String
  username           String             @unique
  email              String             @unique
  birthdate          DateTime
  ageGroup           AgeGroup?
  role               UserRole
  createdAt          DateTime           @default(now())
  xp                 Int                @default(0)
  currentArchetypeId String?
  cart               ShoppingCart?      @relation("ShoppingCartToUser")
  orders             Order[]
  wishlist           Wishlist?
  address            Address[]
  currentArchetype   Archetype?         @relation(fields: [currentArchetypeId], references: [id])
  articles           Article[]
  articleViews       ArticleView[]
  ActivityProgress   ActivityProgress[]
}

model Archetype {
  id           String   @id @default(uuid())
  name         String
  description  String
  imageUrl     String?
  primaryColor String
  modules      Module[]
  users        User[]
}

model Module {
  id                      String     @id @default(uuid())
  title                   String
  description             String
  archetypeId             String?
  ageGroup                AgeGroup
  order                   Int
  pixelBackgroundImageUrl String?
  pixelIslandImageUrl     String?
  iconUrl                 String?
  activities              Activity[]
  archetype               Archetype? @relation(fields: [archetypeId], references: [id], onDelete: Cascade)
}

model Activity {
  id               String             @id @default(uuid())
  moduleId         String
  type             ActivityType
  title            String
  content          Json
  order            Int
  module           Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  activityProgress ActivityProgress[]
}

model ActivityProgress {
  id          String         @id @default(uuid())
  userId      String
  activityId  String
  status      ProgressStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  attempts    Int            @default(0)
  xpEarned    Int            @default(0)
  activity    Activity       @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}

model Article {
  id          String        @id @default(uuid())
  title       String
  content     String
  imageUrl    String?
  authorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isPublished Boolean       @default(false)
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  views       ArticleView[]
}

model ArticleView {
  id        String   @id @default(uuid())
  articleId String
  userId    String
  viewedAt  DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId])
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Decimal
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  imageUrl      String?
  updatedAt     DateTime       @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
}

model ShoppingCart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation("ShoppingCartToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String       @id @default(uuid())
  cartId    String
  productId String
  quantity  Int          @default(1)
  addedAt   DateTime     @default(now())
  cart      ShoppingCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  note       String?
  addedAt    DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  addressId String?
  status    OrderStatus @default(PENDING)
  total     Decimal     @default(0)
  createdAt DateTime    @default(now())
  address   Address?    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  productName String
  unitPrice   Decimal
  quantity    Int      @default(1)
  subtotal    Decimal
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  street     String
  number     String?
  complement String?
  city       String
  state      String
  zipCode    String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
}

enum UserRole {
  ADMIN
  RESPONSIBLE
  LEARNER
}

enum AgeGroup {
  CHILD
  TEEN
}

enum ActivityType {
  FAKE_NEWS
  POST_OR_NOT
  QUIZ
  THEMED_PASSWORD
  FAKE_CHAT
  MATCH_PAIRS
  INFORMATIVE_TEXT
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
